/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> T(TreeNode* root, vector<int> &path, vector<string> &result){
        path.push_back(root->val);
        if(root->left == NULL && root->right == NULL){
            string spath;
            for(int i = 0; i < path.size() - 1; i++){
                spath += to_string(path[i]);
                spath += "->";
            }
            spath += to_string(path[path.size() - 1]);
            result.push_back(spath);
        }
        
        if(root->left){
            T(root->left, path, result);
            path.pop_back();
        }
        if(root->right){
            T(root->right, path, result);
            path.pop_back();
        }
    return result;
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<int> path;
        vector<string> result;
        result = T(root, path, result);
        return result;
    }
};
