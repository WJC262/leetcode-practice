/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* T(vector<int>& inorder, vector<int>& postorder){
        if(postorder.size() == 0){
            return NULL;
        }


        int rootValue = postorder[postorder.size() - 1];
        TreeNode* root = new TreeNode(rootValue);

        if(postorder.size() == 1){
            return root;
        }

        int k = 0;
        for(k = 0; k < inorder.size(); k++){
            if(inorder[k] == rootValue){
                break;
            }
        }

        vector<int> leftinorder(inorder.begin(), inorder.begin() + k);
        vector<int> rightinorder(inorder.begin() + k + 1, inorder.end());

        postorder.resize(postorder.size() - 1);

        vector<int> leftpostorder(postorder.begin(), postorder.begin() + k);
        vector<int> rightpostorder(postorder.begin() + k, postorder.end());

        root->left = T(leftinorder, leftpostorder);
        root->right = T(rightinorder, rightpostorder);
        return root;


    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() == 0 || postorder.size() == 0){
            return NULL;
        }
        TreeNode* result = T(inorder, postorder);
        return result;
    }
};
