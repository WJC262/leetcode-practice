class Solution {
public:
    vector<vector<int>> result;
    vector<int> path;
    void T(vector<int>& candidates, int target, int sum, int start, vector<bool> &used){
        if(sum > target){
            return;
        }
        if(sum == target){
            result.push_back(path);
            return;
        }
        for(int i = start; i < candidates.size(); i++){
            if(i > 0 && used[i - 1] == false && candidates[i] == candidates[i - 1]){
                continue;
            }


            sum += candidates[i];
            path.push_back(candidates[i]);
            used[i] = true;
            T(candidates, target, sum, i + 1, used);
            used[i] = false;
            sum -= candidates[i];
            path.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<bool> used(candidates.size(), false);
        T(candidates, target, 0, 0, used);
        return result;
    }
};
