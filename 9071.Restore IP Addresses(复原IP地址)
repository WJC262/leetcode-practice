class Solution {
public:
    vector<string> result;

    void T(string &s, int start, int num){
        if(num == 3){
            if(isvalid(s, start, s.size() - 1)){
                result.push_back(s);
            }
            return;
        }
        for(int i = start; i < s.size(); i++){
            if(isvalid(s, start, i)){
                s.insert(s.begin() + i + 1, '.');
                num++;
                T(s, i + 2, num);
                num--;
                s.erase(s.begin() + i + 1);
            }else{
                break;
            }
        }

    }

    bool isvalid(string &s, int start, int end){
        if(start > end){
            return false;
        }
        if(s[start] == '0' && start != end){
            return false;
        }
        int num = 0;
        for(int i = start; i <= end; i++){
            if(s[i] > '9' || s[i] < '0'){
                return false;
            }
            num = num * 10 + (s[i] - '0');
            if(num > 255){
            return false;
        }
        }
        
        return true;
    }
    vector<string> restoreIpAddresses(string s) {
        T(s, 0, 0);
        return result;
    }
};
