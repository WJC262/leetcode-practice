/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        TreeNode* node = new TreeNode(0);
        if(nums.size() == 1){
            node->val = nums[0];
            return node;
        }

        int max = 0;
        int index = 0;
        for(int k = 0; k < nums.size(); k++){
            if(nums[k] > max){
                max = nums[k];
                index = k;
            }
        }

        node->val = max;

        if (index > 0) {
        vector<int> leftnum(nums.begin(), nums.begin() + index);
        node->left = constructMaximumBinaryTree(leftnum);
        }
        if(index < nums.size() - 1){
        vector<int> rightnum(nums.begin() + index + 1, nums.end());
        node->right = constructMaximumBinaryTree(rightnum);
        }

        return node;
    }
};
